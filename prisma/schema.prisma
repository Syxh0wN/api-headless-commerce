generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

enum CartStatus {
  OPEN
  MERGED
  CONVERTED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

// ===== CORE ENTITIES =====
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cart   Cart?

  @@map("users")
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("brands")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productCategories ProductCategory[]

  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String?
  shortDescription String?
  status      ProductStatus @default(DRAFT)
  brandId     String?
  brand       Brand?        @relation(fields: [brandId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  variants          ProductVariant[]
  images            ProductImage[]
  productCategories ProductCategory[]

  @@map("products")
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  sku           String   @unique
  attributes    Json     // {color: "red", size: "M"}
  priceCents    Int      // preço em centavos
  currency      String   @default("BRL")
  inventoryQty  Int      @default(0) // estoque direto na variant
  version       Int      @default(1) // para optimistic locking
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  url       String
  position  Int     @default(0)
  alt       String?
  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  sessionId String?    @unique
  status    CartStatus @default(OPEN)
  currency  String     @default("BRL")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User?       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id              String   @id @default(cuid())
  cartId          String
  cart            Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId       String
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  qty             Int
  unitPriceCents  Int      // snapshot do preço
  titleSnapshot   String   // snapshot do título
  skuSnapshot     String   // snapshot do SKU
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([cartId, variantId])
  @@map("cart_items")
}

model Order {
  id                  String      @id @default(cuid())
  orderNumber         String      @unique
  userId              String
  user                User        @relation(fields: [userId], references: [id])
  cartId              String?     // referência ao carrinho original
  status              OrderStatus @default(PENDING)
  amountSubtotalCents Int         // subtotal em centavos
  amountTotalCents    Int         // total em centavos
  currency            String      @default("BRL")
  placedAt            DateTime?   // quando foi finalizado
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  items    OrderItem[]
  shipping ShippingAddress?
  payment  Payment?

  @@map("orders")
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId       String
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  qty             Int
  unitPriceCents  Int      // preço no momento da compra
  createdAt       DateTime @default(now())

  @@map("order_items")
}

model ShippingAddress {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String   @default("BR")
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping_addresses")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider        String        // stripe, pagseguro, etc
  providerRef     String?       // referência do provedor
  status          PaymentStatus @default(PENDING)
  amountCents     Int           // valor em centavos
  currency        String        @default("BRL")
  idempotencyKey  String        @unique // chave de idempotência
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model PromoCode {
  id              String     @id @default(cuid())
  code            String     @unique
  type            CouponType
  value           Int        // valor do desconto
  startsAt        DateTime?
  endsAt          DateTime?
  maxRedemptions  Int?       // limite de uso
  usageCount      Int        @default(0)
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("promo_codes")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  externalId  String   @unique // para dedupe
  signature   String   // HMAC signature
  payload     Json
  processedAt DateTime?
  createdAt   DateTime @default(now())

  @@map("webhook_events")
}

model ApiKey {
  id        String   @id @default(cuid())
  keyHash   String   @unique // hash da chave
  role      String   // role/tenant
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model AuditLog {
  id       String   @id @default(cuid())
  actor    String   // quem fez a ação
  action   String   // ação realizada
  entity   String   // entidade afetada
  entityId String   // ID da entidade
  diff     Json?    // diferenças
  at       DateTime @default(now())

  @@map("audit_logs")
}

// ===== LEGACY MODELS (para compatibilidade) =====
model Coupon {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  description    String?
  type           CouponType
  value          Int      // valor do desconto
  minimumAmount  Int?     // valor mínimo do pedido em centavos
  maximumDiscount Int?    // desconto máximo em centavos
  usageLimit     Int?     // limite de uso
  usedCount      Int      @default(0)
  isActive       Boolean  @default(true)
  validFrom      DateTime?
  validUntil     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("coupons")
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String[] // array de eventos
  secret      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries  WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  event       String
  payload     Json
  status      DeliveryStatus @default(PENDING)
  response    Json?
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  nextRetryAt DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  webhookId   String
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@map("webhook_deliveries")
}