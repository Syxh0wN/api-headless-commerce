generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cart   Cart?

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  shortDescription String?
  sku         String   @unique
  price       Int      // em centavos
  compareAtPrice Int?  // preço de comparação em centavos
  costPrice   Int?     // preço de custo em centavos
  weight      Float?
  dimensions  Json?    // {width, height, depth}
  isActive    Boolean  @default(true)
  isDigital   Boolean  @default(false)
  trackQuantity Boolean @default(true)
  allowBackorder Boolean @default(false)
  requiresShipping Boolean @default(true)
  taxable     Boolean  @default(true)
  metaTitle   String?
  metaDescription String?
  tags        String[]
  images      Json?    // array de URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductVariant {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  price       Int      // em centavos
  compareAtPrice Int?  // preço de comparação em centavos
  costPrice   Int?     // preço de custo em centavos
  weight      Float?
  dimensions  Json?    // {width, height, depth}
  isActive    Boolean  @default(true)
  trackQuantity Boolean @default(true)
  allowBackorder Boolean @default(false)
  requiresShipping Boolean @default(true)
  taxable     Boolean  @default(true)
  options     Json?    // {color: "red", size: "M"}
  images      Json?    // array de URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  inventory   Inventory?
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("product_variants")
}

model Inventory {
  id          String   @id @default(cuid())
  quantity    Int      @default(0)
  reserved    Int      @default(0)
  available   Int      // quantity - reserved
  lowStockThreshold Int @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variantId   String   @unique
  variant     ProductVariant @relation(fields: [variantId], references: [id])

  @@map("inventory")
}

model Cart {
  id             String   @id @default(cuid())
  userId         String?  @unique
  sessionId      String?  @unique
  expiresAt      DateTime?
  couponId       String?
  discountAmount Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User?    @relation(fields: [userId], references: [id])
  coupon         Coupon?  @relation(fields: [couponId], references: [id])
  items          CartItem[]

  @@map("carts")
}

model CartItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Int      // preço no momento da adição em centavos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartId      String
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("cart_items")
}

model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  status      OrderStatus @default(PENDING)
  subtotal   Int      // em centavos
  taxAmount  Int      // em centavos
  shippingAmount Int   // em centavos
  discountAmount Int   // em centavos
  total      Int      // em centavos
  currency   String   @default("BRL")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  items      OrderItem[]
  shipping   ShippingAddress?
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Int      // preço no momento da compra em centavos
  total       Int      // quantity * price em centavos
  createdAt   DateTime @default(now())

  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  variantId   String?
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model ShippingAddress {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String   @default("BR")
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping_addresses")
}

model Payment {
  id          String   @id @default(cuid())
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  amount      Int      // em centavos
  currency    String   @default("BRL")
  transactionId String?
  gateway     String?  // stripe, pagseguro, etc
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Coupon {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  description    String?
  type           CouponType
  value          Int      // valor do desconto
  minimumAmount  Int?     // valor mínimo do pedido em centavos
  maximumDiscount Int?    // desconto máximo em centavos
  usageLimit     Int?     // limite de uso
  usedCount      Int      @default(0)
  isActive       Boolean  @default(true)
  validFrom      DateTime?
  validUntil     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  carts          Cart[]

  @@map("coupons")
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String[] // array de eventos
  secret      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries  WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  event       String
  payload     Json
  status      DeliveryStatus @default(PENDING)
  response    Json?
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  nextRetryAt DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  webhookId   String
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@map("webhook_deliveries")
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}